{
  "openapi": "3.0.1",
  "info": {
    "title": "Mentoresque API",
    "description": "Yes it is an API",
    "version": "0.1.3",
    "contact": {
      "email": "mentoresque@asyavee.pro"
    }
  },
  "paths": {
    "/users": {
      "get": {
        "summary": "gets users info",
        "tags": [
          "Users"
        ],
        "description": "Get a list of users",
        "parameters": [
          {
            "$ref": "#/components/parameters/match-query"
          },
          {
            "$ref": "#/components/parameters/page-query"
          },
          {
            "$ref": "#/components/parameters/limit-query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Meta"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get user by email",
        "description": "Get user by email",
        "parameters": [
          {
            "$ref": "#/components/parameters/email-query-required"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Parameters are requred": {
                    "$ref": "#/components/examples/error-400--parameter-email-is-required"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Email not found": {
                    "$ref": "#/components/examples/error-404--parameter-email-not-found"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "adds new user",
        "description": "Adds new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "email": "hello@user.me"
              }
            }
          },
          "description": "Json body with necessary data for creating new user",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "_id": null,
                  "registration_date": "2016-08-29T09:12:33.001Z",
                  "email": "hello@user.me"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Parameters are requred": {
                    "$ref": "#/components/examples/error-400--parameter-email-is-required"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "User already exists": {
                    "$ref": "#/components/examples/error-409--email-is-not-unique"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "update user data",
        "description": "Update user data",
        "parameters": [
          {
            "$ref": "#/components/parameters/id-path-required"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Json body with new user data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ID is invalid": {
                    "$ref": "#/components/examples/error-400--parameter-id-invalid"
                  },
                  "ID is required": {
                    "$ref": "#/components/examples/error-400--parameter-id-is-required"
                  },
                  "Email is invalid": {
                    "$ref": "#/components/examples/error-400--parameter-email-invalid"
                  },
                  "Timestamps are readonly": {
                    "$ref": "#/components/examples/error-400--parameter-timestamp-is-readonly"
                  },
                  "Role is incorrect": {
                    "$ref": "#/components/examples/error-400--parameter-role-invalid"
                  },
                  "Time_available is incorrect": {
                    "$ref": "#/components/examples/error-400--parameter-timeavailable-invalid"
                  },
                  "Skills are incorrect format": {
                    "$ref": "#/components/examples/error-400--parameter-skills-invalid-format"
                  },
                  "Active not boolean": {
                    "$ref": "#/components/examples/error-400--parameter-active-invalid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ID not found": {
                    "$ref": "#/components/examples/error-404--parameter-id-not-found"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "delete user",
        "description": "Delete user",
        "parameters": [
          {
            "$ref": "#/components/parameters/id-path-required"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "message": "User with email 'hello@user.me' successfully deleted"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ID is invalid": {
                    "$ref": "#/components/examples/error-400--parameter-id-invalid"
                  },
                  "Parameters are requred": {
                    "$ref": "#/components/examples/error-400--parameter-id-is-required"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Email not found": {
                    "$ref": "#/components/examples/error-404--parameter-id-not-found"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "id-path-required": {
        "in": "path",
        "name": "id",
        "description": "User ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "email-query-required": {
        "in": "query",
        "name": "email",
        "description": "User Email",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "match-query": {
        "in": "query",
        "name": "match_with",
        "description": "User ID",
        "schema": {
          "type": "string"
        },
        "example": "5e836e431a2576000fdbcb4b"
      },
      "page-query": {
        "in": "query",
        "name": "page",
        "description": "Page number",
        "schema": {
          "type": "number"
        },
        "example": 2
      },
      "limit-query": {
        "in": "query",
        "name": "limit",
        "description": "Items per page",
        "schema": {
          "type": "number"
        },
        "example": 10
      }
    },
    "schemas": {
      "Error": {
        "title": "Error",
        "description": "Common errors definition",
        "type": "object",
        "properties": {
          "statusCode": {
            "description": "Error code",
            "type": "integer"
          },
          "error": {
            "description": "Error name",
            "type": "string"
          },
          "message": {
            "description": "Error description in human language",
            "type": "string"
          }
        }
      },
      "Meta": {
        "title": "Pagination",
        "description": "Pagination",
        "type": "object",
        "properties": {
          "total_items": {
            "type": "number"
          },
          "current_page": {
            "type": "number"
          },
          "total_pages": {
            "type": "number"
          },
          "next_page": {
            "type": "number"
          },
          "prev_page": {
            "type": "number"
          },
          "per_page": {
            "type": "number"
          }
        }
      },
      "User": {
        "title": "User",
        "description": "User object description",
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "hash",
            "readOnly": true,
            "example": "5e836e431a2576000fdbcb4b"
          },
          "registered": {
            "type": "string",
            "format": "ISO",
            "readOnly": true,
            "example": "2016-08-29T09:12:33.001Z"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "aliwookie@mail.com"
          },
          "display_name": {
            "type": "string",
            "example": "WookieGirl77"
          },
          "bio": {
            "type": "string",
            "example": "I am a C++ jedi and I am awesome, contact me!"
          },
          "role": {
            "type": "string",
            "format": "enum",
            "enum": [
              "jedi",
              "padawan"
            ],
            "example": "jedi"
          },
          "skills": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "string"
            },
            "uniqueItems": true,
            "example": [
              "JavaScript",
              "PHP",
              "C++"
            ]
          }
        }
      }
    },
    "examples": {
      "error-404--parameter-id-not-found": {
        "value": {
          "statusCode": 404,
          "error": "Not Found",
          "message": "User with id: '${id}' does not exist."
        }
      },
      "error-404--parameter-email-not-found": {
        "value": {
          "statusCode": 404,
          "error": "Not Found",
          "message": "User with email: '${email}' does not exist."
        }
      },
      "error-400--parameter-id-is-required": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Parameters 'id' is required"
        }
      },
      "error-400--parameter-email-is-required": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Parameters 'email' is required"
        }
      },
      "error-400--parameter-id-invalid": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "ID invalid format"
        }
      },
      "error-400--parameter-email-invalid": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Invalid email"
        }
      },
      "error-400--parameter-timestamp-is-readonly": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Can't rewrite timestamps."
        }
      },
      "error-400--parameter-role-invalid": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Parameter 'role' should be either `jedi` or `padawan`"
        }
      },
      "error-400--parameter-timeavailable-invalid": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Parameter 'time_available' is incorrect: should be either 0, 1 or 5."
        }
      },
      "error-400--parameter-skills-invalid-format": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Parameter 'skills' is incorrect: should be an array."
        }
      },
      "error-400--parameter-active-invalid": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Parameter 'active' is incorrect: should be boolean."
        }
      },
      "error-400--parameter-id-invalid-format": {
        "value": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "ID invalid format"
        }
      },
      "error-409--email-is-not-unique": {
        "value": {
          "statusCode": 409,
          "error": "Conflict",
          "message": "User with '${id}' already exists. Email should be unique."
        }
      }
    }
  }
}
